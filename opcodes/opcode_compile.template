//
// Autogenerated by CMake on @now@
// All changes to this file will be lost!
//

#include <@OPCODE@.h>
#include <token.h>
#include <asm_compiler.h>
#include <options.h>
#include <exceptions.h>

#include <iomanip>
#include <iostream>
#include <vector>
#include <util.h>
#include <token.h>

namespace primal
{

    std::vector<uint8_t> compile_@OPCODE@(std::vector<token>& tokens)
    {
        opcodes::@OPCODE@ opc;
        auto work_tokens = token::identify_assembly_parameters(tokens, opc);
        if(opc.paramcount() == 2)
        {
            if(tokens[0].get_type() == token::type::TT_NUMBER)
            {
                throw syntax_error(opc.name() + " cannot complete this operation");
            }
        }

        if(options::instance().generate_assembly())
        {
            options::instance().asm_stream() << std::setfill(' ') << std::left << std::setw(5) << "@OPCODE@ ";
            std::stringstream ss;
            for(const auto& t : work_tokens)
            {
                if(t.get_type() == token::type::TT_ASM_MEMORY_ADDRESS)
                {
                    ss << "[";
                }

                ss << t.data();

                if(t.get_type() == token::type::TT_ASM_REG_SUBBYTE)
                {
                    ss << "@" << t.get_extra_info();
                }
                if(t.get_type() == token::type::TT_ASM_MEMORY_ADDRESS)
                {
                    ss << "]";
                }
                ss << " ";
            }
            options::instance().asm_stream() << std::left << std::setfill(' ') << std::setw(20) << ss.str() ;
        }

        std::vector<uint8_t> result;

        // solve the generation
        asm_compiler::generate_assembly_code(opc, work_tokens, result);

        if(options::instance().generate_assembly())
        {
            options::instance().asm_stream() << std::endl;
        }

        return result;
    }

}
