#include "vm.h"

#include <opcodes.h>
#include <hal.h>
#include <types.h>

#include <iostream>
#include <algorithm>
#include <memory>

std::map<uint8_t, vm::executor> vm::vm_runner;

vm::vm()
{
    for(uint8_t i = 0; i<255; i++)
    {
        m_r[i].set_idx(i);
    }
}


bool vm::run(const std::vector<uint8_t> &app)
{
    // firstly set up the memory segment for this machine
    ms = std::make_unique<uint8_t[]>(app.size() + VM_MEM_SEGMENT_SIZE);
    ss = std::make_unique<uint8_t[]>(VM_STACK_SEGMENT_SIZE * sizeof(numeric_t));

    // then copy over the data from app to the memory segment
    std::copy(app.begin(), app.end(), ms.get());

    // then start running it
    if(vm_runner.count( ms[m_ip] ))
    {
        uint8_t opc = ms[m_ip ++];
        if(!vm_runner[ opc ].opcode_runner(this))
        {
            std::cout << "PANIC!" << std::endl;
            return false;
        }
    }
    return true;
}

std::shared_ptr<vm> vm::create()
{
    // this is autogenerated by cmake
    register_opcodes();

    return std::make_shared<vm>();
}

type_destination vm::fetch_type_dest()
{
    return static_cast<type_destination>(ms[m_ip ++]) ;
}

void vm::panic()
{
    std::cout << "PANIC";
    exit(2);
}

uint8_t vm::fetch_register_index()
{
    return ms[m_ip ++];
}

numeric_t vm::fetch_immediate()
{
    numeric_t retv = htovm(*(reinterpret_cast<numeric_t*>(ms.get() + m_ip)));
    m_ip += sizeof(numeric_t);
    return retv;
}
